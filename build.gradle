plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.gdsc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jar {
	enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-aop")
	implementation("org.projectlombok:lombok")
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	annotationProcessor("org.projectlombok:lombok")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.security:spring-security-test")
	testImplementation("org.axonframework:axon-test:_")

	//db
	implementation("org.mariadb.jdbc:mariadb-java-client:_")
	//Hibernate Validator
	implementation('org.hibernate.validator:hibernate-validator:_')

	// axon
	implementation("org.axonframework:axon-spring-boot-starter:_")
	implementation("org.axonframework:axon-configuration:_")

	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:_")
	implementation("com.google.api-client:google-api-client:_")

	implementation("com.squareup.retrofit2:retrofit:_")
	implementation("com.squareup.retrofit2:converter-gson:_")

	implementation("org.hibernate:hibernate-spatial:_")

	// JWT
	implementation("io.jsonwebtoken:jjwt-api:_")
	implementation("io.jsonwebtoken:jjwt-impl:_")
	implementation("io.jsonwebtoken:jjwt-jackson:_")
	implementation ("com.googlecode.json-simple:json-simple:_")
}

tasks.named('test') {
	useJUnitPlatform()
}

String versionIncrement(String versionName, String oldVersion) {
	String nextVersion;
	nextVersion = String.valueOf(Integer.valueOf(oldVersion) + 1);
	println("version changed");
	println(versionName + " version : " + oldVersion + " ---> " + nextVersion);
	return nextVersion;
}

build {
	def props = new Properties()
	File applicationPropertiesFile = project.rootProject.file("src/main/resources/application.properties")
	props.load(applicationPropertiesFile.newInputStream())

	String version = props.getProperty("jmt.api.version")
	def (oldMajor, oldMinor, oldPatch) = version.tokenize('.')

	String minor = versionIncrement("minor", oldMinor)

	String applicationVersion = oldMajor + "." + minor + "." + oldPatch
	version=applicationVersion
	props.setProperty("jmt.api.version", applicationVersion)
	props.store(applicationPropertiesFile.newWriter(), null)

	bootJar.archiveFileName = rootProject.name + "-" + applicationVersion + ".jar"
}